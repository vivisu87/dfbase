<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="org.dfbase.mapper.SysRolePermitMapper" >
  <resultMap id="BaseResultMap" type="org.dfbase.entity.SysRolePermit" >
    <id column="ROLE_ID" property="roleId" jdbcType="BIGINT" />
    <id column="PER_ID" property="perId" jdbcType="BIGINT" />
    <result column="CREATE_DATE" property="createDate" jdbcType="TIMESTAMP" />
    <result column="UPDATE_DATE" property="updateDate" jdbcType="TIMESTAMP" />
    <result column="CREATE_BY" property="createBy" jdbcType="BIGINT" />
    <result column="UPDATE_BY" property="updateBy" jdbcType="BIGINT" />
    <result column="DEL_FLAG" property="delFlag" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    ROLE_ID, PER_ID, CREATE_DATE, UPDATE_DATE, CREATE_BY, UPDATE_BY, DEL_FLAG
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="org.dfbase.entity.SysRolePermitKey" >
    select 
    <include refid="Base_Column_List" />
    from sys_role_permit
    where ROLE_ID = #{roleId,jdbcType=BIGINT}
      and PER_ID = #{perId,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="org.dfbase.entity.SysRolePermitKey" >
    delete from sys_role_permit
    where ROLE_ID = #{roleId,jdbcType=BIGINT}
      and PER_ID = #{perId,jdbcType=BIGINT}
  </delete>
  <insert id="insert" parameterType="org.dfbase.entity.SysRolePermit" >
    insert into sys_role_permit (ROLE_ID, PER_ID, CREATE_DATE, 
      UPDATE_DATE, CREATE_BY, UPDATE_BY, 
      DEL_FLAG)
    values (#{roleId,jdbcType=BIGINT}, #{perId,jdbcType=BIGINT}, #{createDate,jdbcType=TIMESTAMP}, 
      #{updateDate,jdbcType=TIMESTAMP}, #{createBy,jdbcType=BIGINT}, #{updateBy,jdbcType=BIGINT}, 
      #{delFlag,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="org.dfbase.entity.SysRolePermit" >
    insert into sys_role_permit
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        ROLE_ID,
      </if>
      <if test="perId != null" >
        PER_ID,
      </if>
      <if test="createDate != null" >
        CREATE_DATE,
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE,
      </if>
      <if test="createBy != null" >
        CREATE_BY,
      </if>
      <if test="updateBy != null" >
        UPDATE_BY,
      </if>
      <if test="delFlag != null" >
        DEL_FLAG,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="roleId != null" >
        #{roleId,jdbcType=BIGINT},
      </if>
      <if test="perId != null" >
        #{perId,jdbcType=BIGINT},
      </if>
      <if test="createDate != null" >
        #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        #{createBy,jdbcType=BIGINT},
      </if>
      <if test="updateBy != null" >
        #{updateBy,jdbcType=BIGINT},
      </if>
      <if test="delFlag != null" >
        #{delFlag,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="org.dfbase.entity.SysRolePermit" >
    update sys_role_permit
    <set >
      <if test="createDate != null" >
        CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      </if>
      <if test="updateDate != null" >
        UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      </if>
      <if test="createBy != null" >
        CREATE_BY = #{createBy,jdbcType=BIGINT},
      </if>
      <if test="updateBy != null" >
        UPDATE_BY = #{updateBy,jdbcType=BIGINT},
      </if>
      <if test="delFlag != null" >
        DEL_FLAG = #{delFlag,jdbcType=INTEGER},
      </if>
    </set>
    where ROLE_ID = #{roleId,jdbcType=BIGINT}
      and PER_ID = #{perId,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="org.dfbase.entity.SysRolePermit" >
    update sys_role_permit
    set CREATE_DATE = #{createDate,jdbcType=TIMESTAMP},
      UPDATE_DATE = #{updateDate,jdbcType=TIMESTAMP},
      CREATE_BY = #{createBy,jdbcType=BIGINT},
      UPDATE_BY = #{updateBy,jdbcType=BIGINT},
      DEL_FLAG = #{delFlag,jdbcType=INTEGER}
    where ROLE_ID = #{roleId,jdbcType=BIGINT}
      and PER_ID = #{perId,jdbcType=BIGINT}
  </update>
</mapper>